import cv2
import numpy as np

# Load YOLO
net = cv2.dnn.readNet("yolov4-tiny_best.weights", "yolov4-tiny.cfg")
classes = []
with open("miraj.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]
layer_names = net.getUnconnectedOutLayersNames()
colors = [(0, 255, 0),(0, 0, 255)]  # Red and green color for boxes

# Open the video file
video_path = r"C:\Users\miraj\Desktop\train config+cfg\vid.mp4"
cap = cv2.VideoCapture(video_path)

# Set the desired width and height
width = 1440
height = 1000

# Define the codec and create a VideoWriter object
fourcc = cv2.VideoWriter_fourcc(*'XVID')
out1 = cv2.VideoWriter('output_video.avi', fourcc, 20.0, (width, height))

total_parking_slots = 8

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Reset the count for each frame
    free_parking_count = 0

    frame = cv2.resize(frame, (width, height))
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), swapRB=True, crop=False)
    net.setInput(blob)
    outs = net.forward(layer_names)

    class_ids = []
    confidences = []
    boxes = []

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    font = cv2.FONT_HERSHEY_PLAIN
    for i in range(len(boxes)):
        if i in indexes:
            x, y, w, h = boxes[i]
            label = str(classes[class_ids[i]])
            color = colors[class_ids[i]]
            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
            cv2.putText(frame, label, (x, y + 30), font, 3, color, 3)

            # Check if the detected space is free
            if class_ids[i] == 0:  # 0 corresponds to free space
                free_parking_count += 1

    cv2.putText(frame, f'Free Parking Slots: {free_parking_count}/{total_parking_slots}', (10, 50), font, 2, (0, 255, 0), 2)

    out1.write(frame)

    cv2.imshow('Video', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
out1.release()
cv2.destroyAllWindows()
